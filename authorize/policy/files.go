// Code generated by "esc -o=files.go -pkg=policy -prefix=files -private files"; DO NOT EDIT.

package policy

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/require_client_certificate.rego": {
		name:    "require_client_certificate.rego",
		local:   "files/require_client_certificate.rego",
		size:    151,
		modtime: 1591648351,
		compressed: `
H4sIAAAAAAAC/2zNMQrCQBCF4do5xSO1pNJCwZOEsAybUQaTybo7K4h4d8FtLFI+eB9/4njnmyCti2St
S5/lUTVLiLOKeYiSXa8a2YVoEnsNxdlrGfEmAGgL5wuGw+m4R6f25FknNI8/3420s9Whlqr3WsLvuBX6
0DcAAP//jN20m5cAAAA=
`,
	},

	"/require_domain.rego": {
		name:    "require_domain.rego",
		local:   "files/require_domain.rego",
		size:    633,
		modtime: 1591648351,
		compressed: `
H4sIAAAAAAAC/7yRzWrDMBCEz9ZTLD7FEEz6cyoY+h7GmCVa0qWW5OqndWnz7sUrpQen0Ftu9uyn2Rl2
xuMrnghmZ8hzMq2nt8SeRu0MslVKk/3sQ8SYwgBfCgAg/8FTB/3j4WEPdQrk4QUDsH3HiTXkx/WghMdp
ch+ki6U81Bix3ejCkkGeVoLtnGK7OreiyZTNTD44i5HGDXk1yruPLtm46/MK+BZNOjhDJeavtsnTjwN0
W0asx2Q1+cLtRNoXsBFyaKDr4HCzCFfl/45zVurf/OXGHMYQPdtTHjcb8eKuqmU9QZgnjhej+rluVJVb
L7L5XlVLfzesn6XLWf0EAAD//1ia3Jx5AgAA
`,
	},

	"/require_domain_test.rego": {
		name:    "require_domain_test.rego",
		local:   "files/require_domain_test.rego",
		size:    773,
		modtime: 1591648351,
		compressed: `
H4sIAAAAAAAC/9SRzUoDQRCE7/sUxZwUwhLRUyDge4SwNDuNaZw/58dEln13mckesiJevOi1eqqmv+pA
4yu9MIK3HKXYPvJbkciD9pbEdV3mlAfN7gNTBwCanZBJ2O3R1LPkUxu0IWXqyRh/Zr0kJFDCQfGFbDDc
j96q49okLpTcl8SxPp2gRKsdVBUe1AaKLYmpyuXZ+XwbhPm7JLGBY/KOMg/NW2NdMWa1/36P6fC0fdxc
f8KJEsS9kxGN6+bqOHfzUkBj+gsN/BZ/9MXluwXhvrawXUMON/7/ffIvbf2A/xkAAP//MtU/xgUDAAA=
`,
	},

	"/require_email.rego": {
		name:    "require_email.rego",
		local:   "files/require_email.rego",
		size:    453,
		modtime: 1591648351,
		compressed: `
H4sIAAAAAAAC/6yPS0qEMRCE9zlFMSsFCQO6EnKSEIZm0mgwL/NQRL27JFk4/r/LWXb111XVmc4v9MTI
KXBxPcjCr90VPnEg54WwHD90bdR6NfgUALAmPCroh+P9HQ69csEzVbj4Rt5ZzNuDERMn79M722U4zyw1
kn/lSQ6fNQ/KxdybHJpcXQbiQuZSU6TGW3K3WvHn1GO70Qv+mtJ8IgXGr+++qD4ZqA1xUfByZW6hFI7X
z9t/+1/st/gJAAD//88USa7FAQAA
`,
	},

	"/require_email_test.rego": {
		name:    "require_email_test.rego",
		local:   "files/require_email_test.rego",
		size:    771,
		modtime: 1591648351,
		compressed: `
H4sIAAAAAAAC/8yRu2rDQBBFe33FZasEjHBIKoPA/2GMGKQhHrIPZR+xjdC/h12psEJw4crtzM65nLsD
dV/0yRicYS/J1J6/k3hu2ZDoqoocYtuzvWKsAKBnK6QDdg3K9CzxVBZlSZFq0tqduZ8BARRwUJc9X8gM
muvOGXVcX4kdUqxTYJ8fj1DSqx1UHrypDVQB5cl1b128BWH6jyRmYB+cpbhYZKxNWq8Emgbj4WP7vpmT
cKIAsT+kpceceJyqaSmgOD1BA2vKI/qdSza+LA6vuYXt2rK9uX+KP3/Q+E/+HfnfAAAA//9MxIYxAwMA
AA==
`,
	},

	"/require_group.rego": {
		name:    "require_group.rego",
		local:   "files/require_group.rego",
		size:    605,
		modtime: 1591648351,
		compressed: `
H4sIAAAAAAAC/6yQTUoEMRCF932KolcKEgd0JfTaE7gKoYmdogkzScVKgjTq3SXJMD8Z3LlLXn2vfl7Q
y16vCIEcss1OMH5kyzivTDkMg0G/yZh0ylHB1wAA0H7wMoF83j09wJgjMnhKYD0c7Qaqf1RDtejDgT7R
tKbVanTS4lquZOk1W1MQ60NOogjCmlospnemPfJcnmeoKzTYMi6JeOumXnByTFtAsRKtB9TBRrGQezwZ
xVtEHpU87qTE63lP6wJyJK8TXvRv29zWWgoLZZ/uZJXgu0o1T3LY4jpJ18HIWcHUEf11PaPuYZpg9/+D
b4/7a/TP8BsAAP//PC44j10CAAA=
`,
	},

	"/require_group_test.rego": {
		name:    "require_group_test.rego",
		local:   "files/require_group_test.rego",
		size:    1025,
		modtime: 1591648351,
		compressed: `
H4sIAAAAAAAC/9yQzWrDMBCE736KYU8tBDWlPRly7hP0FIxRrMUVsSVVP4Rg/O5Fsg8xhELpLRex7O7s
jD4nu7PsGc6O7HUahefvpD23vbfJVVXkEFvF5oqpAgDFRsshoD6gdC86fpVBGcoohRwGe2G1HAiQAUeS
tAOd8tNRs9Vo41IUKbDPqxNIK6pBufFKmO8tZ5uTt2f2bS5XXbw6Fr21/cDS6SA6O74o7bmL1l/FZ2BP
dd5bLpfyo0SkGkdSORxTgxnzXVM9OvbBGhn59mvNhsrhgOn4vn/bLTYwNkIbrEwVipCauZpXsgXWg6Mt
Cf/Ht7PJxKcV0HPGvN8ibG/kj43zzwRJ0m8QfwIAAP//8rbu/gEEAAA=
`,
	},

	"/require_user.rego": {
		name:    "require_user.rego",
		local:   "files/require_user.rego",
		size:    201,
		modtime: 1591648351,
		compressed: `
H4sIAAAAAAAC/6zMMQoCMRBG4T6n+NlKQYKCleBJlmUJZgiD2UlMZgoR7y7RK1g++Hg13O4hEWrZqLFt
vtHDuNFqnZpzkeQ5dw1qfcHLAcCvcLliPh9PB0xDQooil5QogmVavpL7KpbzjqWa+sH27v33p+c4tp8A
AAD//xyhnp/JAAAA
`,
	},

	"/require_user_test.rego": {
		name:    "require_user_test.rego",
		local:   "files/require_user_test.rego",
		size:    145,
		modtime: 1591648351,
		compressed: `
H4sIAAAAAAAC/1SLwQrCMBBE7/mKoWcpCp6EfIlICXaJi+kmJruIlP67NLfOaYZ5r4TnO0RCyQtVtmWs
9DGuNFmj6pxS00lyX1gdAMwkHFLDze/1hy/rqx97WIrp2OnQIJbSwfEe6/16vpwwdEayIuUYaQbL8Njc
5v4BAAD//8CaY6yRAAAA
`,
	},

	"/": {
		name:  "/",
		local: `files`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"files": {
		_escData["/require_client_certificate.rego"],
		_escData["/require_domain.rego"],
		_escData["/require_domain_test.rego"],
		_escData["/require_email.rego"],
		_escData["/require_email_test.rego"],
		_escData["/require_group.rego"],
		_escData["/require_group_test.rego"],
		_escData["/require_user.rego"],
		_escData["/require_user_test.rego"],
	},
}
